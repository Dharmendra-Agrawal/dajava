package com.da.coding.creational.singleton;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

public class ReflectionBreakingSingleton {
	public static void breakSingleton() throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException{
		BillPughSingleton singleton1= BillPughSingleton.getInstance();
		BillPughSingleton singleton2=singleton1;
		
		Constructor<?>[] constructors = BillPughSingleton.class.getDeclaredConstructors();
		if(constructors!=null){
			for (Constructor<?> constructor : constructors) {
				constructor.setAccessible(true);
				singleton2= (BillPughSingleton) constructor.newInstance();
			}
		}
		
		if(singleton1!=singleton2){
			System.out.println("Singleton is broken, another instance is created");
		}
	}
	
	public static void main(String[] args) throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
		ReflectionBreakingSingleton.breakSingleton();
	}
}
